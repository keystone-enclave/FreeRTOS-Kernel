if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )
    include(../macros.cmake)
    if("${BITS}" STREQUAL "64")
      use_riscv_toolchain(64)
    else()
      use_riscv_toolchain(32)
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -O3 -Werror -fPIC -fno-builtin -g -std=c11 -fcommon -fno-zero-initialized-in-bss")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static -nostdlib")
endif()

cmake_minimum_required(VERSION 3.6)
project(tests C ASM)
set(CMAKE_VERBOSE_MAKEFILE ON)

include_directories(lib/include)

file(GLOB LIB_SOURCE_FILES "lib/src/*")

set(LINK_FILES_PATH ${EXECUTABLE_OUTPUT_PATH}/tests/src)
file(MAKE_DIRECTORY ${LINK_FILES_PATH})

add_executable(rtos_fibonacci fibonacci/fibonacci.c ${LIB_SOURCE_FILES})
set_target_properties(rtos_fibonacci PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(rtos_fibonacci PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -std=c11 -fcommon -fno-zero-initialized-in-bss")
install(TARGETS rtos_fibonacci DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${LINK_FILES_PATH}/rtos_fibonacci.S)
file (WRITE ${LINK_FILES_PATH}/rtos_fibonacci.S ".section .fibonacci\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/rtos_fibonacci\" ")
set(TEST_NAMES rtos_fibonacci)

add_executable(rtos_attest attest/attest.c ${LIB_SOURCE_FILES})
set_target_properties(rtos_attest PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(rtos_attest PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -std=c11 -fcommon -fno-zero-initialized-in-bss")
install(TARGETS rtos_attest DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/rtos_attest.S)
file (WRITE ${LINK_FILES_PATH}/rtos_attest.S ".section .attest\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/rtos_attest\" ")
set(TEST_NAMES ${TEST_NAMES} rtos_attest)

add_executable(rtos_agent agent/agent.c ${LIB_SOURCE_FILES})
set_target_properties(rtos_agent PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(rtos_agent PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -std=c11 -fcommon -fno-zero-initialized-in-bss")
install(TARGETS rtos_agent DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/rtos_agent.S)
file (WRITE ${LINK_FILES_PATH}/rtos_agent.S ".section .agent\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/rtos_agent\" ")
set(TEST_NAMES ${TEST_NAMES} rtos_agent)

add_executable(rtos_simulator simulator/simulator.c ${LIB_SOURCE_FILES})
set_target_properties(rtos_simulator PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(rtos_simulator PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -std=c11 -fcommon -fno-zero-initialized-in-bss")
install(TARGETS rtos_simulator DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/rtos_simulator.S)
file (WRITE ${LINK_FILES_PATH}/rtos_simulator.S ".section .simulator\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/rtos_simulator\" ")
set(TEST_NAMES ${TEST_NAMES} rtos_simulator)

# set(RV8 OFF CACHE BOOL "Enable RV8 build sdk.")
# if (RV8)
add_executable(aes rv8/aes/aes.c ${LIB_SOURCE_FILES})
set_target_properties(aes PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(aes PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS aes DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/aes.S)
file (WRITE ${LINK_FILES_PATH}/aes.S ".section .aes\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/aes\" ")
set(TEST_NAMES ${TEST_NAMES} aes)

add_executable(dhrystone rv8/dhrystone/dhrystone.c ${LIB_SOURCE_FILES})
set_target_properties(dhrystone PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(dhrystone PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS dhrystone DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/dhrystone.S)
file (WRITE ${LINK_FILES_PATH}/dhrystone.S ".section .dhrystone\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/dhrystone\" ")
set(TEST_NAMES ${TEST_NAMES} dhrystone)

add_executable(miniz rv8/miniz/miniz.c ${LIB_SOURCE_FILES})
set_target_properties(miniz PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(miniz PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS miniz DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/miniz.S)
file (WRITE ${LINK_FILES_PATH}/miniz.S ".section .miniz\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/miniz\" ")
set(TEST_NAMES ${TEST_NAMES} miniz)

add_executable(miniz_debug rv8/miniz/miniz.c ${LIB_SOURCE_FILES})
set_target_properties(miniz_debug PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app_debug.lds")
set_target_properties(miniz_debug PROPERTIES COMPILE_FLAGS "-Wall -O0 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
set(TEST_NAMES ${TEST_NAMES} miniz_debug)


add_executable(norx rv8/norx/norx.c ${LIB_SOURCE_FILES})
set_target_properties(norx PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(norx PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS norx DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/norx.S)
file (WRITE ${LINK_FILES_PATH}/norx.S ".section .norx\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/norx\" ")
set(TEST_NAMES ${TEST_NAMES} norx)

add_executable(primes rv8/primes/primes.c ${LIB_SOURCE_FILES})
set_target_properties(primes PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(primes PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS primes DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/primes.S)
file (WRITE ${LINK_FILES_PATH}/primes.S ".section .primes\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/primes\" ")
set(TEST_NAMES ${TEST_NAMES} primes)

add_executable(qsort rv8/qsort/qsort.c ${LIB_SOURCE_FILES})
set_target_properties(qsort PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(qsort PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS qsort DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/qsort.S)
file (WRITE ${LINK_FILES_PATH}/qsort.S ".section .qsort\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/qsort\" ")
set(TEST_NAMES ${TEST_NAMES} qsort)

add_executable(sha512 rv8/sha512/sha512.c ${LIB_SOURCE_FILES})
set_target_properties(sha512 PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(sha512 PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS sha512 DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/sha512.S)
file (WRITE ${LINK_FILES_PATH}/sha512.S ".section .sha512\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/sha512\" ")
set(TEST_NAMES ${TEST_NAMES} sha512)
# endif()

add_executable(sender sender/sender.c ${LIB_SOURCE_FILES})
set_target_properties(sender PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(sender PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS sender DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/sender.S)
file (WRITE ${LINK_FILES_PATH}/sender.S ".section .sender\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/sender\" ")
set(TEST_NAMES ${TEST_NAMES} sender)

add_executable(receiver receiver/receiver.c ${LIB_SOURCE_FILES})
set_target_properties(receiver PROPERTIES LINK_FLAGS "-static -nostdlib -T ${CMAKE_CURRENT_SOURCE_DIR}/app.lds")
set_target_properties(receiver PROPERTIES COMPILE_FLAGS "-Wall -O3 -Werror -fPIC -fno-builtin -g -fcommon -fno-zero-initialized-in-bss")
install(TARGETS receiver DESTINATION ${EXECUTABLE_OUTPUT_PATH})
set(FILES ${FILES} ${LINK_FILES_PATH}/receiver.S)
file (WRITE ${LINK_FILES_PATH}/receiver.S ".section .receiver\n    .incbin \"${EXECUTABLE_OUTPUT_PATH}/receiver\" ")
set(TEST_NAMES ${TEST_NAMES} receiver)




# set(FILES ${LINK_FILES_PATH}/aes.S ${LINK_FILES_PATH}/dhrystone.S ${LINK_FILES_PATH}/miniz.S ${LINK_FILES_PATH}/norx.S ${LINK_FILES_PATH}/primes.S ${LINK_FILES_PATH}/qsort.S ${LINK_FILES_PATH}/sha512.S ${LINK_FILES_PATH}/rtos_fibonacci.S ${LINK_FILES_PATH}/rtos_attest.S ${LINK_FILES_PATH}/rtos_agent.S ${LINK_FILES_PATH}/rtos_simulator.S)

set(FILES ${LINK_FILES_PATH}/sender.S ${LINK_FILES_PATH}/receiver.S ${LINK_FILES_PATH}/aes.S ${LINK_FILES_PATH}/dhrystone.S ${LINK_FILES_PATH}/miniz.S ${LINK_FILES_PATH}/norx.S ${LINK_FILES_PATH}/primes.S ${LINK_FILES_PATH}/qsort.S ${LINK_FILES_PATH}/sha512.S ${LINK_FILES_PATH}/rtos_fibonacci.S ${LINK_FILES_PATH}/rtos_attest.S ${LINK_FILES_PATH}/rtos_agent.S ${LINK_FILES_PATH}/rtos_simulator.S)
# set(FILES ${LINK_FILES_PATH}/sender.S ${LINK_FILES_PATH}/receiver.S ${LINK_FILES_PATH}/rtos_fibonacci.S ${LINK_FILES_PATH}/rtos_attest.S ${LINK_FILES_PATH}/rtos_agent.S ${LINK_FILES_PATH}/rtos_simulator.S)


# These are required variables
set(TEST_FILES ${FILES} PARENT_SCOPE)
# set(TEST_NAMES aes dhrystone miniz norx primes qsort sha512 rtos_fibonacci rtos_attest rtos_agent rtos_simulator PARENT_SCOPE)
set(TEST_NAMES ${TEST_NAMES} PARENT_SCOPE)